@page "/"
@using DetectorVirus.Data
@using System.IO

<div id="FileForm">
    <h4> Subir Archivo: </h4>
    <InputFile OnChange="@OnInputFileChange" multiple />
    <strong id="error_message" style=@error_message_style>@error_message</strong>
</div>
<br />

<h4> Información del archivo subido: </h4>
<div id="Info" style="max-height: 25rem; overflow-y: scroll;">
    <strong>Secuencia encontrada: </strong>
    <br />
    <br />
    <strong> Bytes:</strong>
    <p>@Byte_sequence</p>
    <br />
    <br />
    <strong> Bytes to String:</strong>
    <p> @Readable_byte_sequence</p>
</div>
<br />

<h4> Resultados del Análisis: </h4>
<div id="Results">
    @if (viruses != null && viruses.Length > 0)
    {
        <h6> Estado final del Automata: q9 </h6>
        <strong> Virus Encontrados: </strong>
        @foreach (var virus in viruses)
        {
            <ul>
                <li>
                    @virus.getName()
                </li>
            </ul>

        }
    }
    else
    {
        <h6> Estado final del Automata: q0 </h6>
        <strong> No se han detectado Virus </strong>
    }
</div>

<button @onclick="analyze"> <strong> Analizar</strong></button>


@code {
    private string FilePath { get; set; }
    private IBrowserFile BrowserFile { get; set; }
    private string error_message_style { get; set; } = "color: green;";
    private string error_message { get; set; } = "";
    private string Byte_sequence { get; set; }
    private string Readable_byte_sequence { get; set; }
    private Virus[] viruses;

    // Función ejecutada cuando se detecta un evento de click en el botón "Analizar"
    private async Task analyze()
    {
        // Reestablecer valores por defecto de la interfaz gráfica
        viruses = null;
        Byte_sequence = string.Empty;
        error_message = string.Empty;
        error_message_style = "color: green;";

        // Comprobar que la ruta de archivo indicada por el usuario no sea nulo o un string vacío
        if (!string.IsNullOrEmpty(FilePath) || BrowserFile.Size > 0)
        {
            Analyzer analyzer = new Analyzer();
            try
            {
                if (BrowserFile.Size > 0)
                {
                    var stream = BrowserFile.OpenReadStream();
                    var fileStream = File.Create(FilePath = Path.GetTempPath() + Guid.NewGuid());
                    await stream.CopyToAsync(fileStream);
                    stream.Close();
                    fileStream.Close();
                }
                analyzer.loadVirus(FilePath); // Indicarle al servidor que busque y lea un archivo local con el nombre indicado

                //Manipular Interfaz Gráfica...
                error_message = "Analizando :)";
                Byte_sequence = analyzer.GetVirus().SequenceToString();
                Readable_byte_sequence = analyzer.GetVirus().ToReadableByteArray();

                // Indicarle al analizador que analize el archivo
                viruses = await analyzer.Analyze();
            }
            catch (Exception)
            {
                //Manipular Interfaz Gráfica...
                error_message_style = "color: red;";
                error_message = "No se pudo encontrar el archivo";
                Byte_sequence = string.Empty;
                Readable_byte_sequence = string.Empty;
            }
        }
    }

    private void OnInputFileChange(InputFileChangeEventArgs obj)
    {
        BrowserFile = obj.File;
        BrowserFile.RequestImageFileAsync("multipart/form-data", 500, 500);
    }

}


